{"version":3,"sources":["components/Board.js","components/Cell.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["socket","Cell","_ref","coord","obj","xCoord","split","cellBackground","snake","present","opponentSnake","food","classes","concat","react_default","a","createElement","className","statusCodes","NOT_STARTED","FINISHED","PAUSED","INITIAL","IN_PROGRESS","DEAD","ENDED","DISCONNECTED","PENDING","short","require","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setGameMode","setState","gameMode","state","saveGameState","gameResults","playerId","uid","score","mode","fetch","url","method","headers","Content-Type","body","JSON","stringify","then","result","console","log","setGameStatus","status","message","clearInterval","repaintInterval","setInterval","moveSnake","config","refreshRate","toggleGameState","_this$state","prevStatus","openSocket","connect","emit","on","setTimeout","startGame","updates","type","data","opponentScore","setDirection","keycode","which","newDirection","oldDirection","direction","createFood","x","Math","floor","random","n","y","round","checkCollision","head","hasCollision","slice","i","length","_this$state2","objectSpread","pop","unshift","grid","generate","_this2","document","addEventListener","Array","fill","map","_this3","_this$state3","statusLabel","statusClass","scoreClass","scoreCard","player1","name","color","player2","cells","row","rowIndex","key","_","colIndex","hasSnake","filter","cell","hasOpponentSnake","src_components_Cell","style","title","fontSize","Board_Card","onClick","Component","Card","_ref2","Fragment","App","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OASIA,iHCYWC,SAlBF,SAAAC,GAAoB,IAAjBC,EAAiBD,EAAjBC,MAAOC,EAAUF,EAAVE,IACfC,EAASF,EAAMG,MAAM,KAAK,GAC1BC,EACJH,EAAII,MAAMC,QACR,QAAUL,EAAIM,cAAcD,QAC1B,iBAAmBL,EAAIO,KACrB,OAAS,GAEbC,EAAO,iBAAAC,OACCR,EADD,8CAAAQ,OAIHN,EAJG,UAMX,OAAOO,EAAAC,EAAAC,cAAA,OACLC,UAAWL,MCNAM,SAZK,CAClBC,YAAa,cACbC,SAAU,WACVC,OAAQ,SACRC,QAAS,OACTC,YAAa,cACbC,KAAM,OACNC,MAAO,QACPC,aAAc,eACdC,QAAS,YFFLC,EAAQC,EAAQ,IAGDC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAgCRQ,YAAc,kBAAMP,EAAKQ,SAAS,CAAEC,SAAkC,WAAxBT,EAAKU,MAAMD,SAAwB,QAAU,YAjCxET,EAmCnBW,cAAgB,WACd,IAAMC,EAAc,CAClBC,SAAUb,EAAKU,MAAMI,IACrBC,MAAOf,EAAKU,MAAMK,MAClBC,KAAMhB,EAAKU,MAAMD,UAEnBQ,MAAK,GAAApC,OAAImB,EAAKU,MAAMQ,IAAf,2BAA6C,CAChDC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUZ,KACpBa,KAAK,SAAAC,GAAM,OAAIC,QAAQC,IAAI,2BA/Cb5B,EAkDnB6B,cAAgB,SAACC,GACf,IAAIC,EACJ,OAAQD,GACN,KAAK5C,EAAYE,SACf2C,EAAU,aACVC,cAAchC,EAAKiC,iBACS,WAAxBjC,EAAKU,MAAMD,UAAuBT,EAAKW,gBAC3C,MACF,KAAKzB,EAAYG,OACf0C,EAAU,SACVC,cAAchC,EAAKiC,iBACnB,MACF,KAAK/C,EAAYK,YACfwC,EAAU,iBACV/B,EAAKiC,gBAAkBC,YACrBlC,EAAKmC,UACLnC,EAAKU,MAAM0B,OAAOC,aAEpB,MACF,KAAKnD,EAAYS,QACfoC,EAAU,iBACVC,cAAchC,EAAKiC,iBACnB,MACF,QACEF,EAAU,sBAGd/B,EAAKQ,SAAS,CAAEsB,SAAQC,aA7EP/B,EAgFnBsC,gBAAkB,WAAM,IAAAC,EACcvC,EAAKU,MAAzB8B,EADMD,EACdT,OAAoBZ,EADNqB,EACMrB,IACxBsB,IAAetD,EAAYK,YAAaS,EAAK6B,cAAc3C,EAAYG,QAClEmD,IAAetD,EAAYG,OAAQW,EAAK6B,cAAc3C,EAAYK,aAE7C,UAAxBS,EAAKU,MAAMD,UACbzC,EAASyE,IAAWC,QAAQxB,GAC5BlB,EAAKQ,SAAS,CAAEuB,QAAS,4BACzB/D,EAAO2E,KAAK,YAAa3C,EAAKU,MAAMI,KACpC9C,EAAO4E,GAAG,aAAc,WACtB5C,EAAKQ,SAAS,CAAEuB,QAAS,qBACzBc,WAAW,kBAAM7C,EAAK8C,aAAa,OAErC9E,EAAO4E,GAAG,eAAgB,SAACG,GACJ,SAAjBA,EAAQC,KACVhD,EAAKQ,SAAS,CAAE7B,KAAMoE,EAAQE,OACJ,UAAjBF,EAAQC,MAAoBhD,EAAKU,MAAMI,MAAQiC,EAAQlC,SAChEb,EAAKQ,SAAS,CAAE0C,cAAeH,EAAQE,OACb,aAAjBF,EAAQC,MAAuBhD,EAAKU,MAAMI,MAAQiC,EAAQlC,UACnEb,EAAKQ,SAAS,CAAE9B,cAAeqE,EAAQE,SAG3CjF,EAAO4E,GAAG,YAAa,WACrBjB,QAAQC,IAAI,cAEZ5B,EAAKQ,SAAS,CAAEuB,QAAS,eACzB/B,EAAK6B,cAAc3C,EAAYE,UAC/BpB,EAAO2E,KAAK,iBAGd3C,EAAK8C,aA9GQ9C,EAmHnBmD,aAAe,SAAAjF,GAAwB,IAAdkF,EAAclF,EAArBmF,MACA,KAAZD,GAA0C,WAAxBpD,EAAKU,MAAMD,UAAuBT,EAAKsC,kBADxB,IAIjCgB,EADeC,EAAiBvD,EAAKU,MAAjC8C,UAEQ,KAAZJ,GAAmC,UAAjBG,EAA0BD,EAAe,OAC1C,KAAZF,GAAmC,SAAjBG,EAAyBD,EAAe,KAC9C,KAAZF,GAAmC,SAAjBG,EAAyBD,EAAe,QAC9C,KAAZF,GAAmC,OAAjBG,IAAuBD,EAAe,QAEjEtD,EAAKQ,SAAS,CACZgD,UAAWF,GAA8BC,KA9H1BvD,EAkInByD,WAAa,WAGX,MAAO,CAAEC,EAFCC,KAAKC,MAAuB,IAAhBD,KAAKE,SAAkB7D,EAAKU,MAAM0B,OAAO0B,GAEnDC,EADFJ,KAAKK,MAAuB,IAAhBL,KAAKE,SAAkB7D,EAAKU,MAAM0B,OAAO0B,KApI9C9D,EAwInBiE,eAAiB,SAACC,GAEhB,IAAIC,GAAe,GAEjBD,EAAKR,IAAM,GACXQ,EAAKR,GAAK1D,EAAKU,MAAM0B,OAAO0B,GAC5BI,EAAKH,IAAM,GACXG,EAAKH,GAAK/D,EAAKU,MAAM0B,OAAO0B,KAE5BK,GAAe,GAIjB,IADA,IAAM7C,EAAOtB,EAAKU,MAAMlC,MAAM4F,MAAM,GAC3BC,EAAI,EAAGA,EAAI/C,EAAKgD,OAAQD,IAC/B,GAAIH,EAAKR,IAAMpC,EAAK+C,GAAGX,GAAKQ,EAAKH,IAAMzC,EAAK+C,GAAGN,EAAG,CAChDI,GAAe,EACf,MAGJ,OAAOA,GA3JUnE,EA8JnBmC,UAAY,WACV,IAAI3D,EAAQwB,EAAKU,MAAMlC,MAAM4F,QADbG,EAEgCvE,EAAKU,MAA/C/B,EAFU4F,EAEV5F,KAAM6E,EAFIe,EAEJf,UAAWzC,EAFPwD,EAEOxD,MAAON,EAFd8D,EAEc9D,SAAUK,EAFxByD,EAEwBzD,IAEpCoD,EAAIjE,OAAAuE,EAAA,EAAAvE,CAAA,GAAQzB,EAAM,IAElBwB,EAAKiE,eAAeC,GACL,UAAbzD,GACFzC,EAAO2E,KAAK,cAAe7B,GAC3Bd,EAAK6B,cAAc3C,EAAYS,UAE/BK,EAAK6B,cAAc3C,EAAYE,WAK/B8E,EAAKR,IAAM/E,EAAK+E,GAAKQ,EAAKH,IAAMpF,EAAKoF,GACvChD,IACiB,WAAbN,EAAuB9B,EAAOqB,EAAKyD,cAErCzF,EAAO2E,KAAK,cAAe,CAAEM,KAAMtE,EAAMkC,SAAUb,EAAKU,MAAMI,IAAKkC,KAAM,SACzEhF,EAAO2E,KAAK,cAAe,CAAEM,KAAMlC,EAAOF,SAAUb,EAAKU,MAAMI,IAAKkC,KAAM,UAC1ErE,EAAO,KAGTH,EAAMiG,MAEU,UAAdjB,EACFU,EAAKH,IACkB,SAAdP,EACTU,EAAKH,IACkB,OAAdP,EACTU,EAAKR,IACkB,SAAdF,GACTU,EAAKR,IAEPlF,EAAMkG,QAAQR,GACdlE,EAAKQ,SAAS,CACZhC,QACAG,OACAoC,UAE0B,UAAxBf,EAAKU,MAAMD,UACbzC,EAAO2E,KAAK,cAAe,CAAEM,KAAMzE,EAAOqC,SAAUb,EAAKU,MAAMI,IAAKkC,KAAM,eAzM3DhD,EA6MnB8C,UAAY,WACV9C,EAAKQ,SAAS,CACZsB,OAAQ5C,EAAYK,YACpBwB,MAAO,EACPgB,QAAS,iBACTyB,UAAW,QACXhF,MAAO,CAAC,CAAEkF,EAAG,EAAGK,EAAG,GAAK,CAAEL,EAAG,EAAGK,EAAG,IACnCpF,KAA8B,WAAxBqB,EAAKU,MAAMD,SAAwBT,EAAKyD,aAAezF,EAAO2E,KAAK,cAAe,CAAEK,KAAM,WAElGhD,EAAKiC,gBAAkBC,YACrBlC,EAAKmC,UACLnC,EAAKU,MAAM0B,OAAOC,cAtNpBrC,EAAKU,MAAQ,CAEXQ,IAAK,0CACLY,OAAQ5C,EAAYC,YACpBR,KAAM,GACNgG,KAAM,GACN5D,MAAO,EACPvC,MAAO,GACPuD,QAAS,sBACTrD,cAAe,GACfwE,cAAe,EACfzC,SAAU,SACVK,IAAKlB,EAAMgF,WACXpB,UAAW,QACXpB,OAAQ,CACNC,YAAa,IACbyB,EAAG,KAlBU9D,mFAuBC,IAAA6E,EAAA1E,KAClB2E,SAASC,iBAAiB,UAAW5E,KAAKgD,cAC1C,IAAMwB,EAAOK,MAAM7E,KAAKO,MAAM0B,OAAO0B,GAAGmB,KAAK,GAAGC,IAAI,kBAAMF,MAAMH,EAAKnE,MAAM0B,OAAO0B,GAAGmB,KAAK,KAC1F9E,KAAKK,SAAS,CAAEmE,wDAIY,UAAxBxE,KAAKO,MAAMD,UAAsBzC,EAAO2E,KAAK,+CA8L1C,IAAAwC,EAAAhF,KAAAiF,EACuFjF,KAAKO,MAA3FiE,EADDS,EACCT,KAAM7C,EADPsD,EACOtD,OAAQrB,EADf2E,EACe3E,SAAUjC,EADzB4G,EACyB5G,MAAOuC,EADhCqE,EACgCrE,MAAOrC,EADvC0G,EACuC1G,cAAewE,EADtDkC,EACsDlC,cAAevE,EADrEyG,EACqEzG,KAAMoD,EAD3EqD,EAC2ErD,QAE5EsD,EAAW,GAAAxG,OAAMiD,GACjBwD,EAAc,UAAYD,EAC1BE,EAAU,SAAA1G,OAAYiD,IAAW5C,EAAYE,SAAW,WAAa,IAErEoG,EAAY,CAChBC,QAAS,CAAEC,KAAM,MAAO3E,QAAO4E,MAAO,SACtCC,QAAS,CAAEF,KAAM,WAAY3E,MAAOmC,EAAeyC,MAAO,QAGtDE,EAAQlB,EAAKO,IAAI,SAACY,EAAKC,GAC3B,OACEjH,EAAAC,EAAAC,cAAA,OAAKgH,IAAK,OAASD,EAAU9G,UAAU,YACpC6G,EAAIZ,IAAI,SAACe,EAAGC,GACX,IAAM9H,EAAM,CACVI,MAAO,CAAEC,SAAS,GAClBC,cAAe,CAAED,SAAS,IAG5BL,EAAIO,KAAOoH,IAAapH,EAAK+E,GAAKwC,IAAavH,EAAKoF,EACpD,IAAMoC,EAAW3H,EAAM4H,OAAO,SAAAC,GAAI,OAAIA,EAAK3C,IAAMqC,GAAYM,EAAKtC,IAAMmC,IAGxE,GAFA9H,EAAII,MAAMC,WAAa0H,EAAS7B,SAAU6B,EAAS,IAElC,UAAb1F,EAAsB,CACxB,IAAI6F,EAAmB5H,EAAc0H,OAAO,SAAAC,GAAI,OAAIA,EAAK3C,IAAMqC,GAAYM,EAAKtC,IAAMmC,IACtF9H,EAAIM,cAAcD,WAAa6H,EAAiBhC,SAAUgC,EAAiB,IAG7E,OACExH,EAAAC,EAAAC,cAACuH,EAAD,CACEpI,MAAO4H,EAAW,IAAMG,EACxBF,IAAK,MAAQD,EAAW,OAASG,EACjC9H,IAAKA,SAQjB,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,cACGF,EAAAC,EAAAC,cAAA,QAAMwH,MAAO,CAAEb,MAAO,UAAtB,KADH,MACgD,IAC9C7G,EAAAC,EAAAC,cAAA,QAAMyH,MAAOpB,EAAapG,UAAWqG,KAEvCxG,EAAAC,EAAAC,cAAA,OAAKC,UAAWsG,GAAhB,IACGzG,EAAAC,EAAAC,cAAA,QAAMwH,MAAO,CAAEb,MAAO,UAAtB,KADH,OACiD,IAC/C7G,EAAAC,EAAAC,cAAA,QAAMwH,MAAO,CAAEb,MAAO,QAASe,SAAU,SACtC3F,KAIPjC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZ4G,GAEH/G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAC2H,EAAD,CAAM3F,KAAMP,EAAU+E,UAAWA,EAAWzD,QAASA,MAGrDD,IAAW5C,EAAYC,aAAe2C,IAAW5C,EAAYE,WAE3DN,EAAAC,EAAAC,cAAA,QAAMyH,MAAOhG,EAAW,UAAWxB,UAAU,iBAAiB2H,QAAS,kBAAMzB,EAAK5E,gBAEjE,WAAbE,EACG3B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAKxBH,EAAAC,EAAAC,cAAA,QAAMyH,MAAM,OAAOxH,UAAU,YAAY2H,QAASzG,KAAKmC,iBAEnDR,IAAW5C,EAAYK,YACpBT,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCA5SK4H,aAqT7BC,EAAO,SAAAC,GAAkC,IAA/B/F,EAA+B+F,EAA/B/F,KAAMwE,EAAyBuB,EAAzBvB,UAAWzD,EAAcgF,EAAdhF,QAC/B,OACEjD,EAAAC,EAAAC,cAACF,EAAAC,EAAMiI,SAAP,KACElI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,SACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAiB,WAAT+B,EAAoB,gBAAkB,iBAG/DlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,YACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQ8C,IAGf,UAATf,GACClC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,aACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,YACGwG,EAAUC,QAAQC,KAAOF,EAAUC,QAAQC,KAAO,YAErD5G,EAAAC,EAAAC,cAAA,QAAMwH,MAAO,CAAEE,SAAU,SAAW,KAAOlB,EAAUC,QAAQ1E,QAG/DjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,YACGwG,EAAUI,QAAQF,KAAOF,EAAUI,QAAQF,KAAO,WACnD5G,EAAAC,EAAAC,cAAA,QAAMwH,MAAO,CAAEE,SAAU,SAAW,KAAOlB,EAAUI,QAAQ7E,YGvU5DkG,mLARX,OACEnI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACkI,EAAD,cAJUL,aCIEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3I,EAAAC,EAAAC,cAAC0I,EAAD,MAAS5C,SAAS6C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrG,KAAK,SAAAsG,GACjCA,EAAaC","file":"static/js/main.65f543f6.chunk.js","sourcesContent":["/* eslint-disable linebreak-style */\r\nimport React, { Component } from 'react';\r\nimport openSocket from 'socket.io-client';\r\nimport Cell from './Cell';\r\nimport './Board.scss';\r\nimport statusCodes from '../constants';\r\n\r\nconst short = require('short-uuid');\r\n\r\nlet socket;\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // url: 'http://localhost:3001',\r\n      url: 'https://bubblegum-server.herokuapp.com/',\r\n      status: statusCodes.NOT_STARTED,\r\n      food: {},\r\n      grid: [],\r\n      score: 0,\r\n      snake: [],\r\n      message: 'Hit the play button',\r\n      opponentSnake: [],\r\n      opponentScore: 0,\r\n      gameMode: 'SINGLE',\r\n      uid: short.generate(),\r\n      direction: 'RIGHT',\r\n      config: {\r\n        refreshRate: 200,\r\n        n: 20, // no of cells\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this.setDirection);\r\n    const grid = Array(this.state.config.n).fill(0).map(() => Array(this.state.config.n).fill(0));\r\n    this.setState({ grid });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.state.gameMode === 'MULTI') socket.emit('disconnect');\r\n  }\r\n\r\n  setGameMode = () => this.setState({ gameMode: this.state.gameMode === 'SINGLE' ? 'MULTI' : 'SINGLE' });\r\n\r\n  saveGameState = () => {\r\n    const gameResults = {\r\n      playerId: this.state.uid,\r\n      score: this.state.score,\r\n      mode: this.state.gameMode\r\n    }\r\n    fetch(`${this.state.url}/api/snake/game-results`, {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(gameResults)\r\n    }).then(result => console.log('Updated Successfully'));\r\n  }\r\n\r\n  setGameStatus = (status) => {\r\n    let message;\r\n    switch (status) {\r\n      case statusCodes.FINISHED:\r\n        message = 'Game Over!';\r\n        clearInterval(this.repaintInterval);\r\n        if (this.state.gameMode === 'SINGLE') this.saveGameState();\r\n        break;\r\n      case statusCodes.PAUSED:\r\n        message = 'Paused';\r\n        clearInterval(this.repaintInterval);\r\n        break;\r\n      case statusCodes.IN_PROGRESS:\r\n        message = 'In progress...'\r\n        this.repaintInterval = setInterval(\r\n          this.moveSnake,\r\n          this.state.config.refreshRate\r\n        );\r\n        break;\r\n      case statusCodes.PENDING:\r\n        message = 'Someone died..';\r\n        clearInterval(this.repaintInterval);\r\n        break;\r\n      default:\r\n        message = 'Hit the play button';\r\n        break;\r\n    }\r\n    this.setState({ status, message });\r\n  }\r\n\r\n  toggleGameState = () => {\r\n    const { status: prevStatus, url } = this.state;\r\n    if (prevStatus === statusCodes.IN_PROGRESS) this.setGameStatus(statusCodes.PAUSED);\r\n    else if (prevStatus === statusCodes.PAUSED) this.setGameStatus(statusCodes.IN_PROGRESS);\r\n    else {\r\n      if (this.state.gameMode === 'MULTI') {\r\n        socket = openSocket.connect(url);\r\n        this.setState({ message: 'Waiting for opponent...' });\r\n        socket.emit('join-game', this.state.uid);\r\n        socket.on('start-game', () => {\r\n          this.setState({ message: 'Starting game...' });\r\n          setTimeout(() => this.startGame(), 1000);\r\n        });\r\n        socket.on('game-updates', (updates) => {\r\n          if (updates.type === 'FOOD') {\r\n            this.setState({ food: updates.data });\r\n          } else if (updates.type === 'SCORE' && this.state.uid !== updates.playerId) {\r\n            this.setState({ opponentScore: updates.data });\r\n          } else if (updates.type === 'POSITION' && this.state.uid !== updates.playerId) {\r\n            this.setState({ opponentSnake: updates.data });\r\n          }\r\n        });\r\n        socket.on('game-over', () => {\r\n          console.log('Game Over!');\r\n          // this.saveGameState();\r\n          this.setState({ message: 'Game Over!' });\r\n          this.setGameStatus(statusCodes.FINISHED);\r\n          socket.emit('disconnect');\r\n        });\r\n      } else {\r\n        this.startGame();\r\n      }\r\n    }\r\n  }\r\n\r\n  setDirection = ({ which: keycode }) => {\r\n    if (keycode === 32 && this.state.gameMode === 'SINGLE') this.toggleGameState(); // start/pause the game with space.\r\n\r\n    const { direction: oldDirection } = this.state;\r\n    let newDirection;\r\n    if (keycode === 37 && oldDirection !== 'RIGHT') newDirection = 'LEFT';\r\n    else if (keycode === 38 && oldDirection !== 'DOWN') newDirection = 'UP';\r\n    else if (keycode === 39 && oldDirection !== 'LEFT') newDirection = 'RIGHT';\r\n    else if (keycode === 40 && oldDirection !== 'UP') newDirection = 'DOWN';\r\n\r\n    this.setState({\r\n      direction: newDirection ? newDirection : oldDirection\r\n    });\r\n  }\r\n\r\n  createFood = () => {\r\n    const x = Math.floor((Math.random() * 100) % this.state.config.n);\r\n    const y = Math.round((Math.random() * 100) % this.state.config.n);\r\n    return { x, y };\r\n  }\r\n\r\n  checkCollision = (head) => {\r\n    /* Wall collision */\r\n    let hasCollision = false;\r\n    if (\r\n      head.x <= -1 ||\r\n      head.x >= this.state.config.n ||\r\n      head.y <= -1 ||\r\n      head.y >= this.state.config.n\r\n    ) {\r\n      hasCollision = true;\r\n    }\r\n    /* Self collision */\r\n    const body = this.state.snake.slice(1);\r\n    for (let i = 0; i < body.length; i++) {\r\n      if (head.x === body[i].x && head.y === body[i].y) {\r\n        hasCollision = true;\r\n        break;\r\n      }\r\n    }\r\n    return hasCollision;\r\n  }\r\n\r\n  moveSnake = () => {\r\n    let snake = this.state.snake.slice();\r\n    let { food, direction, score, gameMode, uid } = this.state;\r\n\r\n    let head = { ...snake[0] };\r\n\r\n    if (this.checkCollision(head)) {\r\n      if (gameMode === 'MULTI') {\r\n        socket.emit('player-dead', uid);\r\n        this.setGameStatus(statusCodes.PENDING);\r\n      } else {\r\n        this.setGameStatus(statusCodes.FINISHED);\r\n      }\r\n      return;\r\n    }\r\n    // Check if food is eaten.\r\n    if (head.x === food.x && head.y === food.y) {\r\n      score++;\r\n      if (gameMode === 'SINGLE') food = this.createFood();\r\n      else {\r\n        socket.emit('game-status', { data: food, playerId: this.state.uid, type: 'FOOD' });\r\n        socket.emit('game-status', { data: score, playerId: this.state.uid, type: 'SCORE' });\r\n        food = {};\r\n      }\r\n    } else {\r\n      snake.pop(); /* if the food is not eaten, then its popped */\r\n    }\r\n    if (direction === 'RIGHT') {\r\n      head.y++;\r\n    } else if (direction === 'LEFT') {\r\n      head.y--;\r\n    } else if (direction === 'UP') {\r\n      head.x--;\r\n    } else if (direction === 'DOWN') {\r\n      head.x++;\r\n    }\r\n    snake.unshift(head);\r\n    this.setState({\r\n      snake,\r\n      food,\r\n      score,\r\n    });\r\n    if (this.state.gameMode === 'MULTI') {\r\n      socket.emit('game-status', { data: snake, playerId: this.state.uid, type: 'POSITION' });\r\n    }\r\n  }\r\n\r\n  startGame = () => {\r\n    this.setState({\r\n      status: statusCodes.IN_PROGRESS,\r\n      score: 0,\r\n      message: 'In progress...',\r\n      direction: 'RIGHT',\r\n      snake: [{ x: 2, y: 5 }, { x: 2, y: 4 }],\r\n      food: this.state.gameMode === 'SINGLE' ? this.createFood() : socket.emit('game-status', { type: 'FOOD' }),\r\n    });\r\n    this.repaintInterval = setInterval(\r\n      this.moveSnake,\r\n      this.state.config.refreshRate\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { grid, status, gameMode, snake, score, opponentSnake, opponentScore, food, message } = this.state;\r\n\r\n    const statusLabel = `${status}`;\r\n    const statusClass = `status ` + statusLabel;\r\n    const scoreClass = `score ${status === statusCodes.FINISHED ? 'finished' : ''}`;\r\n\r\n    const scoreCard = {\r\n      player1: { name: 'You', score, color: 'green' },\r\n      player2: { name: 'Opponent', score: opponentScore, color: 'red' }\r\n    };\r\n\r\n    const cells = grid.map((row, rowIndex) => {\r\n      return (\r\n        <div key={'row-' + rowIndex} className=\"grid-row\">\r\n          {row.map((_, colIndex) => {\r\n            const obj = {\r\n              snake: { present: false },\r\n              opponentSnake: { present: false }\r\n            };\r\n\r\n            obj.food = rowIndex === food.x && colIndex === food.y;\r\n            const hasSnake = snake.filter(cell => cell.x === rowIndex && cell.y === colIndex);\r\n            obj.snake.present = !!(hasSnake.length && hasSnake[0]);\r\n\r\n            if (gameMode === 'MULTI') {\r\n              let hasOpponentSnake = opponentSnake.filter(cell => cell.x === rowIndex && cell.y === colIndex);\r\n              obj.opponentSnake.present = !!(hasOpponentSnake.length && hasOpponentSnake[0]);\r\n            }\r\n\r\n            return (\r\n              <Cell\r\n                coord={rowIndex + '-' + colIndex}\r\n                key={'row' + rowIndex + '-col' + colIndex}\r\n                obj={obj}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"content\">\r\n        <header>\r\n          <h3>\r\n            S<span style={{ color: 'white' }}>n</span>ake{' '}\r\n            <span title={statusLabel} className={statusClass} />\r\n          </h3>\r\n          <div className={scoreClass}>\r\n            S<span style={{ color: 'white' }}>c</span>ore:{' '}\r\n            <span style={{ color: 'white', fontSize: '135%' }}>\r\n              {score}\r\n            </span>\r\n          </div>\r\n        </header>\r\n        <section>\r\n          <div className=\"board\">\r\n            {cells}\r\n          </div>\r\n          <div className=\"sidebar\">\r\n            <Card mode={gameMode} scoreCard={scoreCard} message={message} />\r\n          </div>\r\n\r\n          {(status === statusCodes.NOT_STARTED || status === statusCodes.FINISHED)\r\n            && (\r\n              <span title={gameMode + ' PLAYER'} className=\"game-mode icon\" onClick={() => this.setGameMode()}>\r\n                {\r\n                  gameMode === 'SINGLE' ?\r\n                    (<i className=\"fas fa-dice-one\"></i>) :\r\n                    (<i className=\"fas fa-dice-two\"></i>)\r\n                }\r\n              </span>\r\n            )}\r\n\r\n          <span title=\"Play\" className=\"play icon\" onClick={this.toggleGameState}>\r\n            {\r\n              status === statusCodes.IN_PROGRESS ?\r\n                (<i className=\"far fa-pause-circle\" />) :\r\n                (<i className=\"far fa-play-circle\" />)\r\n            }\r\n          </span>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst Card = ({ mode, scoreCard, message }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"block\">\r\n        <div className=\"hint\">Mode:</div>\r\n        <div className=\"text\">{mode === 'SINGLE' ? 'Single Player' : 'Multi Player'}</div>\r\n      </div>\r\n\r\n      <div className=\"block\">\r\n        <div className=\"hint\">Message:</div>\r\n        <div className=\"text\">{message}</div>\r\n      </div>\r\n\r\n      {mode === 'MULTI' && (\r\n        <div className=\"block\">\r\n          <div className=\"hint\">Scorecard</div>\r\n          <div className=\"text\">\r\n            <span>\r\n              {scoreCard.player1.name ? scoreCard.player1.name : 'Player 1'}\r\n            </span>\r\n            <span style={{ fontSize: '120%' }}>{': ' + scoreCard.player1.score}</span>\r\n          </div>\r\n\r\n          <div className=\"text\">\r\n            <span>\r\n              {scoreCard.player2.name ? scoreCard.player2.name : 'Player 2'}\r\n              <span style={{ fontSize: '120%' }}>{': ' + scoreCard.player2.score}</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};","import React from 'react';\r\nimport './Cell.css';\r\n\r\nconst Cell = ({ coord, obj }) => {\r\n  const xCoord = coord.split('-')[0];\r\n  const cellBackground =\r\n    obj.snake.present ?\r\n      'snake' : obj.opponentSnake.present ?\r\n        'opponent-snake' : obj.food ?\r\n          'food' : '';\r\n\r\n  let classes = `\r\n        row-${xCoord}\r\n        row\r\n        grid-cell\r\n        ${cellBackground}\r\n    `;\r\n  return <div\r\n    className={classes} >\r\n  </div>;\r\n};\r\nexport default Cell;\r\n","const statusCodes = {\n  NOT_STARTED: 'not-started',\n  FINISHED: 'finished',\n  PAUSED: 'paused',\n  INITIAL: 'none',\n  IN_PROGRESS: 'in-progress',\n  DEAD: 'dead',\n  ENDED: 'ended',\n  DISCONNECTED: 'disconnected',\n  PENDING: 'pending',\n};\n\nexport default statusCodes;\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { Component } from 'react';\nimport './App.css';\n\n/* Components */\nimport Board from './components/Board';\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}