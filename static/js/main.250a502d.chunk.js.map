{"version":3,"sources":["components/Cell.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","x","coord","split","styles","concat","hasFood","hasSnake","react_default","a","createElement","className","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","status","food","score","snake","direction","config","refreshRate","n","handleGameStatus","bind","assertThisInitialized","startGame","moveSnake","setDirection","document","addEventListener","clearInterval","repaintInterval","setState","setInterval","y","createFood","Math","floor","random","round","head","hasCollision","body","slice","i","length","dir","objectSpread","checkCollision","pop","unshift","keycode","_ref","which","oldDirection","_this2","noOfCells","statusClass","statusLabel","scoreClass","cellIndexes","Array","from","keys","cells","map","key","filter","s","src_components_Cell","style","color","title","onClick","Component","App","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.250a502d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Cell.css';\r\n\r\nconst Cell = props => {\r\n  const x = props.coord.split('-')[0];\r\n\r\n  const styles = `\r\n        row-${x}\r\n        row\r\n        grid-cell\r\n        ${props.hasFood ? 'food' : ''}\r\n        ${props.hasSnake ? 'snake' : ''}\r\n    `;\r\n  return <div className={styles} />;\r\n};\r\nexport default Cell;\r\n","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\nimport './Board.css';\r\n\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      status: 0, // 0 - not started, 1 - in progress, 2 - finished, 3 - paused\r\n      food: {},\r\n      score: 0,\r\n      snake: [],\r\n      direction: 'RIGHT',\r\n      config: {\r\n        refreshRate: 260,\r\n        n: 20 // no of cells\r\n      }\r\n    };\r\n    this.handleGameStatus = this.handleGameStatus.bind(this);\r\n    this.startGame = this.startGame.bind(this);\r\n    this.moveSnake = this.moveSnake.bind(this);\r\n    this.setDirection = this.setDirection.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this.setDirection);\r\n  }\r\n  handleGameStatus() {\r\n    if (this.state.status === 1) {\r\n      // pause the game\r\n      clearInterval(this.repaintInterval);\r\n      this.setState({\r\n        status: 3\r\n      });\r\n    } else if (this.state.status === 3) {\r\n      // resume the game\r\n      this.repaintInterval = setInterval(\r\n        this.moveSnake,\r\n        this.state.config.refreshRate\r\n      );\r\n      this.setState({\r\n        status: 1\r\n      });\r\n    } else {\r\n      this.startGame();\r\n    }\r\n  }\r\n  startGame() {\r\n    this.setState({\r\n      status: 1,\r\n      score: 0,\r\n      direction: 'RIGHT',\r\n      snake: [{ x: 2, y: 5 }, { x: 2, y: 4 }, { x: 2, y: 3 }]\r\n    });\r\n    this.createFood();\r\n    this.repaintInterval = setInterval(\r\n      this.moveSnake,\r\n      this.state.config.refreshRate\r\n    );\r\n    // this.el.focus(); // For the keydown event to work\r\n  }\r\n  createFood() {\r\n    const x = Math.floor((Math.random() * 100) % this.state.config.n);\r\n    const y = Math.round((Math.random() * 100) % this.state.config.n);\r\n    this.setState({\r\n      food: { x, y }\r\n    });\r\n  }\r\n  checkCollision(head) {\r\n    /* Check for wall & self collision */\r\n    /* Wall collision */\r\n    let hasCollision = false;\r\n    if (\r\n      head.x <= -1 ||\r\n      head.x >= this.state.config.n ||\r\n      head.y <= -1 ||\r\n      head.y >= this.state.config.n\r\n    ) {\r\n      hasCollision = true;\r\n    }\r\n    /* Self collision */\r\n    const body = this.state.snake.slice(1);\r\n    for (let i = 0; i < body.length; i++) {\r\n      if (head.x === body[i].x && head.y === body[i].y) {\r\n        hasCollision = true;\r\n        break;\r\n      }\r\n    }\r\n    if (hasCollision) {\r\n      this.setState({\r\n        status: 2\r\n      });\r\n      clearInterval(this.repaintInterval);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  moveSnake() {\r\n    const dir = this.state.direction;\r\n    const food = this.state.food;\r\n    let snake = this.state.snake.slice();\r\n\r\n    let head = { ...snake[0] };\r\n\r\n    /* If there is a collision, then break out */\r\n    if (this.checkCollision(head)) return;\r\n\r\n    // Check if food is eaten.\r\n    if (head.x === food.x && head.y === food.y) {\r\n      this.setState({\r\n        score: this.state.score + 1\r\n      });\r\n      this.createFood();\r\n      /* last item need not be popped. that increases the length  */\r\n    } else {\r\n      /* if the food is not eaten, then its popped */\r\n      snake.pop();\r\n    }\r\n    if (dir === 'RIGHT') {\r\n      head.y++;\r\n    } else if (dir === 'LEFT') {\r\n      head.y--;\r\n    } else if (dir === 'UP') {\r\n      head.x--;\r\n    } else if (dir === 'DOWN') {\r\n      head.x++;\r\n    }\r\n    snake.unshift(head);\r\n    this.setState({\r\n      snake: snake\r\n    });\r\n  }\r\n  setDirection({ which: keycode }) {\r\n    // start/pause the game with space.\r\n    if (keycode === 32) this.handleGameStatus();\r\n\r\n    const oldDirection = this.state.direction;\r\n    let dir;\r\n    if (keycode === 37 && oldDirection !== 'RIGHT') dir = 'LEFT';\r\n    if (keycode === 38 && oldDirection !== 'DOWN') dir = 'UP';\r\n    if (keycode === 39 && oldDirection !== 'LEFT') dir = 'RIGHT';\r\n    if (keycode === 40 && oldDirection !== 'UP') dir = 'DOWN';\r\n\r\n    this.setState({\r\n      direction: dir ? dir : this.state.direction\r\n    });\r\n  }\r\n  render() {\r\n    const noOfCells = this.state.config.n;\r\n    const status = this.state.status;\r\n\r\n    let statusClass = `status ${\r\n      status === 0\r\n        ? 'not-started'\r\n        : status === 1\r\n        ? 'in-progress'\r\n        : status === 2\r\n        ? 'finished'\r\n        : 'paused'\r\n    }`;\r\n    let statusLabel = `${\r\n      status === 0\r\n        ? 'Not Started'\r\n        : status === 1\r\n        ? 'In Progress'\r\n        : status === 2\r\n        ? 'Finished'\r\n        : 'Paused'\r\n    }`;\r\n    const scoreClass = `score ${status === 2 ? 'finished' : ''}`;\r\n    const cellIndexes = Array.from(Array(noOfCells).keys());\r\n    const cells = cellIndexes.map(x => {\r\n      return (\r\n        <div key={'row-' + x} className=\"grid-row\">\r\n          {cellIndexes.map(y => {\r\n            const hasFood = x === this.state.food.x && y === this.state.food.y;\r\n            let hasSnake = this.state.snake.filter(s => s.x === x && s.y === y);\r\n            hasSnake = !!(hasSnake.length && hasSnake[0]);\r\n            return (\r\n              <Cell\r\n                coord={x + '-' + y}\r\n                key={x + '' + y}\r\n                hasFood={hasFood}\r\n                hasSnake={hasSnake}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"content\">\r\n        <header>\r\n          <h3>\r\n            S<span style={{ color: 'white' }}>n</span>ake{' '}\r\n            <span title={statusLabel} className={statusClass} />\r\n          </h3>\r\n          <div className={scoreClass}>\r\n            S<span style={{ color: 'white' }}>c</span>ore:{' '}\r\n            <span style={{ color: 'white' }}>{this.state.score}</span>\r\n          </div>\r\n        </header>\r\n        <div className=\"board\">\r\n          <div className=\"overlay\">\r\n            {/* <button onClick={this.startGame}>Start</button> */}\r\n            <span title=\"Play\" className=\"play\" onClick={this.handleGameStatus}>\r\n              {status === 1 ? (\r\n                <i className=\"far fa-pause-circle\" />\r\n              ) : (\r\n                <i className=\"far fa-play-circle\" />\r\n              )}\r\n            </span>\r\n          </div>\r\n          {cells}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\n\n/* Components */\nimport Board from './components/Board';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}